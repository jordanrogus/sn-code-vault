<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_648117_codevault.DuplicateFinder</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Functions to support finding duplicate records.</description>
        <mobile_callable>false</mobile_callable>
        <name>DuplicateFinder</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[const DuplicateRecord = Class.create();
DuplicateRecord.prototype = {
    initialize: function() {
        this.TYPE_CHECKER = new x_648117_codevault.TypeChecker();
    },

    /**
     * Determines if a duplicate record (based on a mandatory passed in query) exists on the table and retrieves it if found (retrieves the first if multiple found)
     * @param {string} tableName - Table to query
     * @param {string} encodedQuery - Query to run to find duplicate
     * @param {string} currentRecordSysId - Record id to check against
     * @returns {GlideRecord|boolean} - Duplicate record if found or false if no duplicate is found
     **/
    getDuplicateRecord: function(tableName, encodedQuery, currentRecordSysId) {
		if (!gs.tableExists(tableName)){
			throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["tableName", tableName]));
		}
		if (!this.TYPE_CHECKER.isPopulatedString(encodedQuery)){
			throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["encodedQuery", encodedQuery]));
		}
		if (!this.TYPE_CHECKER.isSysId(currentRecordSysId)){
			throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["currentRecordSysId", currentRecordSysId]));
		}

        const dupRecordCheckGr = new GlideRecord(tableName);
        if (!dupRecordCheckGr.isEncodedQueryValid(encodedQuery)) {
            throw new Error(gs.getMessage(CONSTANTS.INVALID_ENCODED_QUERY, [encodedQuery, tableName]));
        }
        dupRecordCheckGr.addEncodedQuery(encodedQuery);
        dupRecordCheckGr.query();
        if (dupRecordCheckGr.next() && dupRecordCheckGr.getUniqueValue() !== currentRecordSysId) {
            return dupRecordCheckGr;
        }
        return false;
    },

    type: 'DuplicateRecord',
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 22:03:11</sys_created_on>
        <sys_id>1ab73fb153f69210829a70c0a0490e08</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>DuplicateFinder</sys_name>
        <sys_package display_value="CodeVault" source="x_648117_codevault">f41ce2a553b21210829a70c0a0490efc</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeVault">f41ce2a553b21210829a70c0a0490efc</sys_scope>
        <sys_update_name>sys_script_include_1ab73fb153f69210829a70c0a0490e08</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-07-18 23:09:37</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>1ab73fb153f69210829a70c0a0490e08</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 22:11:52</sys_created_on>
        <sys_id>d1b93f3d53b69210829a70c0a0490ea7</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-31 22:11:52</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
