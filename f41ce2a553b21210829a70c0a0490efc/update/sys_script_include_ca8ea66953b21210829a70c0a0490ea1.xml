<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_648117_codevault.DatabaseHelper</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Utility functions to simplify and standardize certain common interactions with the ServiceNow database.</description>
        <mobile_callable>false</mobile_callable>
        <name>DatabaseHelper</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[const DatabaseHelper = Class.create();
DatabaseHelper.prototype = {
    initialize: function() {
        this.TYPE_CHECKER = new x_648117_codevault.TypeChecker;
    },

    /**SNDOC
	@name getGlideRecord
	@description Retrieves a record from a table. Will throw a type error if the table does not exist or the sysId is not valid.
	@param {string} [tableName] - Table to query
	@param {string} [sysId] - Record sys_id to query
	@returns {GlideRecord|null} Retrieved record. Null if record not found.
	@example
	return new global.DatabaseHelper().getGlideRecord("incident", "f0fd00672b3d261014fff87dce91bfdd"); 
	// [object GlideRecord]
	*/
    getGlideRecord: function(tableName, sysId) {
        if (!gs.tableExists(tableName)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["tableName", tableName]));
        }
        if (!this.TYPE_CHECKER.isSysId(sysId)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["sysId", sysId]));
        }

        const recordGr = new GlideRecord(tableName);
        if (recordGr.get(sysId)) {
            return recordGr;
        }
        return null;
    },

    /**SNDOC
    @name getRecordDisplayValue
    @description Retrieves the display value from a record from a table. Will throw a type error if the table does not exist or the sysId is not valid. 
    @param {string} [tableName] - Table to query
    @param {string} [sysId] - Record sys_id to query
    @returns {string|null} Record display value. Null if record not found.
    @example
    return new global.DatabaseHelper().getRecordDisplayValue("incident", "f0fd00672b3d261014fff87dce91bfdd"); 
	// INC0010044
    */
    getRecordDisplayValue: function(tableName, sysId) {
        if (!gs.tableExists(tableName)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["tableName", tableName]));
        }
        if (!this.TYPE_CHECKER.isSysId(sysId)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["sysId", sysId]));
        }

        const recordGr = new GlideRecord(tableName);
        if (recordGr.get(sysId)) {
            return recordGr.getDisplayValue();
        }
        return null;
    },

    /**SNDOC
    @name getGlideRecords
    @description Retrieves table records from a query. Must pass in a query. Will throw a type error if the table does not exist or the encoded query is not a valid string. Will throw an error if the encoded query is invalid for the table.
    @param {string} [tableName] - Table to query
    @param {string} [encodedQuery] - Encoded query to filter table against
    @returns {GlideRecord|null} Retrieved record(s). Null if record(s) not found.
    @example
    return new global.DatabaseHelper().getGlideRecords("incident", "active=true"); 
	// [object GlideRecord]
    */
    getGlideRecords(tableName, encodedQuery) {
        if (!gs.tableExists(tableName)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["tableName", tableName]));
        }
        if (!this.TYPE_CHECKER.isPopulatedString(encodedQuery)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["encodedQuery", encodedQuery]));
        }

        const recordsGr = new GlideRecord(tableName);
        if (!recordsGr.isValidEncodedQuery(encodedQuery)) {
            throw new Error(gs.getMessage(CONSTANTS.INVALID_ENCODED_QUERY, [encodedQuery, tableName]));
        }
        recordsGr.addEncodedQuery(encodedQuery);
        recordsGr.query();
        if (recordsGr.hasNext()) {
            return recordsGr;
        }
        return null;
    },

    /**SNDOC
	@name getRecordsDisplayValue
	@description Retrieves the display values for queried records. Will throw a type error if the table does not exist or the array is invalid or empty. Will throw an error if the array is too large. If no records are found an empty array is returned.
	@param {Array.<string>} [sysIds] - Array of record sys_ids to filter against table
	@param {string} [encodedQuery] - Encoded query to filter table against
	@returns {Array.<string>} Array of records as display values
	@example
	return new global.DatabaseHelper().getRecordsDisplay("incident", ["f0fd00672b3d261014fff87dce91bfdd","bdb5d30b2bf5e21014fff87dce91bff0"]); 
	// ["INC0010043","INC0010044"]
	*/
    getRecordsDisplayValue: function(tableName, sysIds) {
        if (!gs.tableExists(tableName)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["tableName", tableName]));
        }
        if (!this.TYPE_CHECKER.isPopulatedArray(sysIds)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["sysIds", sysIds]));
        }
        if (sysIds.length > CONSTANTS.ARRAY_DISPLAY_TRANSLATION_MAX_LENGTH) {
            throw new Error(gs.getMessage(CONSTANTS.ARRAY_DISPLAY_TRANSLATION_MAX_LENGTH_REACHED, [tableName, CONSTANTS.ARRAY_DISPLAY_TRANSLATION_MAX_LENGTH]));
        }

        const recordDisplays = [];
        const query = "sys_idIN" + sysIds.toString();
        const recordsGr = this.getGlideRecords(tableName, query);
        if (recordsGr) {
            while (recordsGr.next()) {
                recordDisplays.push(recordsGr.getDisplayValue());
            }
        }
        return recordDisplays;
    },

    /**SNDOC
	@name hasRecords
	@description Checks if records exist in table from a query. Must pass in a query. Will throw a type error if the table does not exist or the encoded query is not a valid string. Will throw an error if the encoded query is invalid for the table.
    @param {string} [tableName] - Table to query
    @param {string} [encodedQuery] - Encoded query to use in check
	@returns {boolean} If the query against the table returned any records
	@example
	return new global.DatabaseHelper().hasRecords("incident", "active=true"); 
	// true
	*/
    hasRecords: function(tableName, encodedQuery) {
        if (!gs.tableExists(tableName)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["tableName", tableName]));
        }
        if (!this.TYPE_CHECKER.isPopulatedString(encodedQuery)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["encodedQuery", encodedQuery]));
        }

        const recordsGr = new GlideRecord(tableName);
        if (!recordsGr.isValidEncodedQuery(encodedQuery)) {
            throw new Error(gs.getMessage(CONSTANTS.INVALID_ENCODED_QUERY, [encodedQuery, tableName]));
        }
        recordsGr.addEncodedQuery(encodedQuery);
        recordsGr.setLimit(1);
        recordsGr.query();
        return recordsGr.hasNext();
    },

    /**SNDOC
	@name getRecordCount
	@description Returns table record count. Will throw a type error if the table does not exist. Will throw a type error if the encoded query is not a string.
    @param {string} [tableName] - Table to query
    @param {string} [encodedQuery] - Encoded query to filter table against
	@returns {integer|null} Count of records. Null if GlideAggregate object not found.
	@example
	return new global.DatabaseHelper().getRecordCount("incident", "active=true"); 
	// 10
	*/
    getRecordCount: function(tableName, encodedQuery) {
        if (!gs.tableExists(tableName)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["tableName", tableName]));
        }

        const recordCountGa = new GlideAggregate(tableName);
        if (encodedQuery) {
            if (!this.TYPE_CHECKER.isString(encodedQuery)) {
                throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["encodedQuery", encodedQuery]));
            }
            recordCountGa.addEncodedQuery(encodedQuery);
        }
        recordCountGa.addAggregate("COUNT");
        recordCountGa.query();
        if (recordCountGa.next()) {
            return recordCountGa.getAggregate("COUNT");
        }
        return null;
    },

    /**SNDOC
	@name transformGrToObj
	@description Transforms a GlideRecord object into a JS object. Will throw a type error if the sourceGr is not a valid GlideRecord object.
    @param {GlideRecord object} [sourceGr] - GlideRecord to objectify
    @param {Array.<string>} [fields] - Field names to include in the resulting object. If not passed in all fields will be returned
	@returns {Object} Transformed object.
	@example
	const incidentGr = new global.DatabaseHelper().getGlideRecord("incident", "f0fd00672b3d261014fff87dce91bfdd");
	return JSON.stringify(new global.DatabaseHelper().transformGrToObj(incidentGr, ["number","caller_id"]));
	// {"number":{"value":"INC0010043","displayValue":"INC0010043"},"caller_id":{"value":"6816f79cc0a8016401c5a33be04be441","displayValue":"System Administrator"}}
	*/
    transformGrToObj: function(sourceGr, fields) {
        if (!this.TYPE_CHECKER.isGlideRecord(sourceGr)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, ["sourceGr", sourceGr]));
        }

        if (!this.TYPE_CHECKER.isPopulatedArray(fields)) {
            const glideRecordUtil = new GlideRecordUtil();
            fields = glideRecordUtil.getFields(sourceGr);
        }

        const obj = {};
        fields.forEach((field) => {
            // Add empty data if field does not exist and log msg
            if (!sourceGr.isValidField(field)) {
                gs.error(gs.getMessage(CONSTANTS.INVALID_TABLE_FIELD, [field, sourceGr.getTableName(), sourceGr.getDisplayValue()]));
            }

            const ed = sourceGr.getElement(field).getED(); // Get the Element Descriptor for this field
            const fieldType = global.j2js(ed.getInternalType()); // Get the field type's name. Returns a JAVA object so global.j2js translated back to JS
            const isChoice = ed.isChoiceTable(); // Check if this field is a choice field
            const isBoolean = (fieldType === CONSTANTS.BOOLEAN_FIELD_TYPE); // Check if this field is a boolean field

            if (isChoice) {
                this._addElementToObject(
                    obj,
                    field,
                    sourceGr.getValue(field),
                    sourceGr.getElement(field).getChoiceValue()
                );
                return;
            }

            if (isBoolean) {
                const booleanValue = sourceGr.getValue(field);
                const booleanDisplay = (booleanValue == 1); // Raw boolean values are stored as a 0 (false) or a 1 (true)
                this._addElementToObject(obj, field, booleanValue, booleanDisplay);
                return;
            }

            // Other field types
            this._addElementToObject(obj, field, sourceGr.getValue(field), sourceGr.getDisplayValue(field));
        });
        return obj;
    },

    /**SNDOC
	@name _addElementToObject
	@description Adds data to a passed in object.
	@private
    @param {Object} [obj] - Object to append data to
    @param {string} [fieldName] - Field to add
    @param {string} [value] - Field value to add
    @param {string} [displayValue = value] - Field display value to add
	@returns {Object} Updated object
	@example
	return this._addElementToObject(obj, "account", "34162926fb962e10cf8afc7c5eefdcfc", "Funco Intl");
	// {"account":{"value":"cf9a6ccdc3ec6210f8cd55f1b40131d4","displayValue":"Aakron Rule Corporation"}}
	*/
    _addElementToObject: function(obj, fieldName, value, displayValue) {
        value = value || "";
        displayValue = displayValue || "";

        obj[fieldName] = {};
        obj[fieldName]["value"] = value;
        obj[fieldName]["displayValue"] = displayValue || value;
    },

    type: 'DatabaseHelper',
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-30 22:09:45</sys_created_on>
        <sys_id>ca8ea66953b21210829a70c0a0490ea1</sys_id>
        <sys_mod_count>62</sys_mod_count>
        <sys_name>DatabaseHelper</sys_name>
        <sys_package display_value="CodeVault" source="x_648117_codevault">f41ce2a553b21210829a70c0a0490efc</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeVault">f41ce2a553b21210829a70c0a0490efc</sys_scope>
        <sys_update_name>sys_script_include_ca8ea66953b21210829a70c0a0490ea1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-07-18 23:21:50</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>ca8ea66953b21210829a70c0a0490ea1</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-30 22:09:44</sys_created_on>
        <sys_id>2cafe62553b21210829a70c0a0490e89</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-30 22:09:44</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
