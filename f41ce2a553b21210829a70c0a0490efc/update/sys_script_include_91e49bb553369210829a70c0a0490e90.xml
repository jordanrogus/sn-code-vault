<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_648117_codevault.ArithmeticOperation</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Functions to support common arithmetic operations</description>
        <mobile_callable>false</mobile_callable>
        <name>ArithmeticOperation</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[const ArithmeticOperation = Class.create();
ArithmeticOperation.prototype = {
    initialize: function() {},

    /**
     * From an array of elements (of up to 1000 elements) add all of the numeric values. If a value is not numeric it is skipped
     * @example .sumElements([100,50,25]) results in (100+50+25) or 175
     * 
     * @param {Array.<string>} array - Array of values to add
     * @returns {Number|null}
     **/
    sumElements: function(array) {
        const filteredArray = this._validate(array);
        if (!filteredArray) {
            gs.error(gs.getMessage(CONSTANTS.INVALID_PARAMS));
            return null;
        }
        return filteredArray.reduce(function(total, num) {
            return parseFloat(total) + parseFloat(num);
        }, 0).toFixed(2); // Default to 0 to start
    },

    /**
     * From an array of elements (of up to 1000 elements) subtract all of the numeric values in order. If a value is not numeric it is skipped
     * @example .subtractElements([100,50,25]) results in (100-50-25) or 25
     * 
     * @param {Array.<string>} array - Array of values to subtract
     * @returns {Number|null}
     **/
    subtractElements: function(array) {
        const filteredArray = this._validate(array);
        if (!filteredArray) {
            gs.error(gs.getMessage(CONSTANTS.INVALID_PARAMS));
            return null;
        }
        if (filteredArray.length == 1) {
            return filteredArray[0];
        }
        return filteredArray.reduce(function(total, num) {
            return parseFloat(total) - parseFloat(num);
        }).toFixed(2);
    },

    /**
     * From an array of elements (of up to 1000 elements) divide all of the numeric values in order. If a value is not numeric or 0 it is skipped
     * @example .divideElements([100,50,25]) results in (100/50/25) which is (100/50) = 2/25 = 0.08
     * 
     * @param {Array.<string>} array - Array of values to divide
     * @returns {Number|null}
     **/
    divideElements: function(array) {
        const filteredArray = this._validate(array);
        if (!filteredArray) {
            gs.error(gs.getMessage(CONSTANTS.INVALID_PARAMS));
            return null;
        }
        if (filteredArray.length == 1) {
            return filteredArray[0];
        }
        return filteredArray.reduce(function(total, num) {
            if (num == 0) {
                return total;
            }
            return parseFloat(total) / parseFloat(num);
        }).toFixed(2);
    },

    /**
     * From an array of elements (of up to 1000 elements) multiply all of the numeric values in order. If a value is not numeric it is skipped
     * @example .multiplyElements([100,50,25]) results in (100*50*25) which is (100*50) = 5000*25 = 125000
     * 
     * @param {Array.<string>} array - Array of values to multiply
     * @returns {Number|null}
     **/
    multiplyElements: function(array) {
        const filteredArray = this._validate(array);
        if (!filteredArray) {
            gs.error(gs.getMessage(CONSTANTS.INVALID_PARAMS));
            return null;
        }
        if (filteredArray.length == 1) {
            return filteredArray[0];
        }
        return filteredArray.reduce(function(total, num) {
            return parseFloat(total) * parseFloat(num);
        }).toFixed(2);
    },

    /**
     * Validates the array is ready for arithmetic operations by:
     * (1) Ensure the array is a non-empty array
     * (2) Filters an array to keep only elements that are:
     *   (1) A string or a number
     *   (2) Not empty
     *   (3) Evaluates to NaN
	 * (3) Keeping only the first 1000 elements for performance concerns
     * 
     * @param {Array.<string>} array - Array to filter
     * @returns {Array.<string>|null} - Filtered array
     **/
    _validate: function(array) {
        if (!Array.isArray(array) || array.length === 0) {
            return null;
        }
		if (array.length > CONSTANTS.ARITHMETIC_ARRAY_MAX_LENGTH){
			array = array.slice(0, CONSTANTS.ARITHMETIC_ARRAY_MAX_LENGTH);
		}
        return array.filter(function(element) {
            const isNotString = typeof element !== "string";
            const isNotNumber = typeof element !== "number";
            const isEmpty = !element;
            const isValNaN = isNaN(element);

            if ((isNotString && isNotNumber) || isEmpty || isValNaN) {
                return false;
            }
            return element;
        });
    },

    type: 'ArithmeticOperation'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 19:31:16</sys_created_on>
        <sys_id>91e49bb553369210829a70c0a0490e90</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>ArithmeticOperation</sys_name>
        <sys_package display_value="CodeVault" source="x_648117_codevault">f41ce2a553b21210829a70c0a0490efc</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CodeVault">f41ce2a553b21210829a70c0a0490efc</sys_scope>
        <sys_update_name>sys_script_include_91e49bb553369210829a70c0a0490e90</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-31 22:25:59</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>91e49bb553369210829a70c0a0490e90</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 19:31:16</sys_created_on>
        <sys_id>01f49bf553369210829a70c0a0490e87</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-31 19:31:16</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
