<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_648117_codevault.TypeChecker</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Functions to support JS and SN type checking. All functions return booleans.</description>
        <mobile_callable>false</mobile_callable>
        <name>TypeChecker</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var TypeChecker = Class.create();
TypeChecker.prototype = {
    initialize: function() {},

    isNull: function(arg) {
        return arg === null;
    },

    isUndefined: function(arg) {
        return arg === undefined;
    },

    isNil: function(arg) {
        return this.isNull(arg) || this.isUndefined(arg);
    },

    isString: function(arg) {
        return typeof arg === 'string';
    },

    isEmptyString: function(arg) {
        return this.isString(arg) && arg.length === 0;
    },

    isPopulatedString: function(arg) {
        return this.isString(arg) && arg.trim().length > 0;
    },

    isSysId: function(arg) {
        return this.isString(arg) && /^[a-z0-9]{32}$/i.test(arg);
    },

    isJsonString: function(arg) {
        if (!this.isString(arg)) {
            return false;
        }

        try {
            JSON.parse(arg);
            return true;
        } catch (e) {
            return false;
        }
    },

    isRegExp: function(arg) {
        return arg instanceof RegExp;
    },

    isParsableAsNumber: function(arg) {
        // Check if it's a number directly
        if (this.isNumber(arg)) {
            return true;
        }

        // If not, check if it's a valid numeric string (including scientific notation)
        if (this.isString(arg)) {
            return /^-?\d+(\.\d+)?([eE][+-]?\d+)?$/.test(arg);
        }

        // Otherwise, it's not parsable as a number
        return false;
    },

    isNumber: function(arg) {
        return typeof arg === "number";
    },

    isFiniteNumber: function(arg) {
        return this.isNumber(arg) && isFinite(arg);
    },

    isInteger: function(arg) {
        return Number.isInteger(arg);
    },

    isPositiveInteger: function(arg) {
        return this.isInteger(arg) && arg > 0;
    },

    isNegativeInteger: function(arg) {
        return this.isInteger(arg) && arg < 0;
    },

    isBoolean: function(arg) {
        return typeof arg === 'boolean';
    },

    isBooleanTrue: function(arg) {
        return this.isBoolean(arg) && arg === true;
    },

    isBooleanFalse: function(arg) {
        return this.isBoolean(arg) && arg === false;
    },

    isArray: function(arg) {
        return Array.isArray(arg);
    },

    isEmptyArray: function(arg) {
        return this.isArray(arg) && arg.length === 0;
    },

    isPopulatedArray: function(arg) {
        return this.isArray(arg) && arg.length > 0;
    },

    isObject: function(arg) {
        return typeof arg === 'object' && !this.isArray(arg) && !this.isNull(arg);
    },

    isEmptyObject: function(arg) {
        return this.isObject(arg) && Object.keys(arg).length === 0;
    },

    isPopulatedObject: function(arg) {
        return this.isObject(arg) && Object.keys(arg).length > 0;
    },

    isObjectArray: function(arg) {
        return this.isArray(arg) && arg.every(function(element) {
            return this.isObject(element);
        }.bind(this));
    },

    isStringArray: function(arg) {
        return this.isArray(arg) && arg.every(function(element) {
            return this.isString(element);
        }.bind(this));
    },

    isFunction: function(arg) {
        return typeof arg === 'function';
    },

    isGlideRecord: function(arg) {
        return arg instanceof GlideRecord;
    },

    isGlideAggregate: function(arg) {
        return arg instanceof GlideAggregate;
    },

    type: 'TypeChecker'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 22:47:39</sys_created_on>
        <sys_id>32308c4e53f69210829a70c0a0490e61</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>TypeChecker</sys_name>
        <sys_package display_value="CodeVault" source="x_648117_codevault">f41ce2a553b21210829a70c0a0490efc</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CodeVault">f41ce2a553b21210829a70c0a0490efc</sys_scope>
        <sys_update_name>sys_script_include_32308c4e53f69210829a70c0a0490e61</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-07 16:54:32</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>32308c4e53f69210829a70c0a0490e61</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 22:47:39</sys_created_on>
        <sys_id>21e184ca53f69210829a70c0a0490edb</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-31 22:47:39</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
