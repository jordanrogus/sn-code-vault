<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_648117_codevault.XmlJsonConverter</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Functions to support handling XML and JSON conversions.</description>
        <mobile_callable>false</mobile_callable>
        <name>XmlJsonConverter</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[const XmlJsonConverter = Class.create();
XmlJsonConverter.prototype = {
    initialize: function() {
        this.tc = new x_648117_codevault.TypeChecker();
        this.stringHandler = new x_648117_codevault.StringHandler();
    },

    /**
     * Translates XML to JSON
     * @param {string} xmlString - XML string to translate
     * @returns {Object} - Translated JSON
     **/
    xmlToJson: function(xmlString) {
        if (!this.tc.isXmlString(xmlString)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, JSON.stringify(arguments)));
        }
        return gs.xmlToJSON(xmlString);
    },

    /**
     * Translates JSON to XML
     * @param {Object} jsonObj - JSON object to translate
     * @param {string} [rootElement] - Optional XML root element name to use
     * @returns {string} - Translated XML
     **/
    jsonToXml: function(jsonObj, rootElement) {
        if (!this.tc.isObject(jsonObj)) {
            throw new TypeError(gs.getMessage(CONSTANTS.INVALID_PARAMS, JSON.stringify(arguments)));
        }

        rootElement = rootElement || CONSTANTS.DEFAULT_JSON_ROOT_ELEMENT;
        let xml = '<' + rootElement + '>';
        xml += this._convertToXml(jsonObj);
        xml += '</' + rootElement + '>';
        return xml;
    },

    /**
     * Recursively converts a JSON object to an XML string
     * @param {Object} jsonObj - The JSON object or value to convert
     * @returns {string} - The resulting XML string
     **/
    _convertToXml: function(jsonObj) {
        let xml = '';

        for (let key in jsonObj) {
            if (jsonObj.hasOwnProperty(key)) {
                var value = jsonObj[key];
                if (this.tc.isObject(value) || this.tc.isArray(value)) {
                    xml += '<' + key + '>';
                    xml += this._convertToXml(value);
                    xml += '</' + key + '>';
                } else {
                    xml += '<' + key + '>' +
                        this.stringHandler.escapeXml(value.toString()) +
                        '</' + key + '>';
                }
            }
        }
        return xml;
    },

    type: 'XmlJsonConverter',
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-01-07 19:42:01</sys_created_on>
        <sys_id>be8a5f8053471210829a70c0a0490e48</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>XmlJsonConverter</sys_name>
        <sys_package display_value="CodeVault" source="x_648117_codevault">f41ce2a553b21210829a70c0a0490efc</sys_package>
        <sys_policy/>
        <sys_scope display_value="CodeVault">f41ce2a553b21210829a70c0a0490efc</sys_scope>
        <sys_update_name>sys_script_include_be8a5f8053471210829a70c0a0490e48</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-14 20:03:21</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>be8a5f8053471210829a70c0a0490e48</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-01-07 19:42:14</sys_created_on>
        <sys_id>f19a174053471210829a70c0a0490e01</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-01-07 19:42:14</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
