<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_648117_codevault.RecordCloner</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Functions to support cloning SN records</description>
        <mobile_callable>false</mobile_callable>
        <name>RecordCloner</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[const RecordCloner = Class.create();
RecordCloner.prototype = {
    initialize: function() {},

    /**
     * Clones a record in the specified table
     * @param {string} tableName - Name of the table containing the record to duplicate
     * @param {string} sourceSysId - Sys_id of the record to duplicate
     * @param {Object} [modifications] - Optional object of field-value pairs to modify in the new record
     * @returns {string|null} - Sys_id of the new record, or null if cloning fails
     **/
    cloneRecord: function(tableName, sourceSysId, modifications) {
        if (!gs.tableExists(tableName) || typeof sourceSysId !== 'string' || sourceSysId.trim().length !== 32) {
            gs.error(gs.getMessage(CONSTANTS.INVALID_PARAMS));
            return null;
        }

        const sourceGr = new GlideRecord(tableName);
        if (!sourceGr.get(sourceSysId)) {
            gs.error(gs.getMessage(CONSTANTS.RECORD_CLONE_SOURCE_RECORD_NOT_FOUND, [sourceSysId, tableName]));
            return null;
        }

        const clonedGr = new GlideRecord(tableName);
        clonedGr.newRecord();

        const glideRecordUtil = new global.GlideRecordUtil();
        const fields = glideRecordUtil.getFields(sourceGr);
        fields.forEach(field => {
            if (clonedGr.isValidField(field) && !this._isExcludedField(field)) {
                clonedGr.setValue(field, sourceGr.getValue(field));
            }
        });

        if (modifications) {
            if (this._isObject(modifications) && Object.keys(modifications).length > 0) {
                const invalidFields = [];
                Object.entries(modifications).forEach(([key, value]) => {
                    if (clonedGr.isValidField(key)) {
                        clonedGr.setValue(key, value);
                    } else {
                        invalidFields.push(key);
                    }
                });
                if (invalidFields.length > 0) {
                    gs.warn(gs.getMessage(CONSTANTS.RECORD_CLONE_INVALID_MODIFICATION_FIELDS, [invalidFields.toString(), tableName]));
                }
            } else {
                gs.warn(gs.getMessage(CONSTANTS.RECORD_CLONE_MODIFICATION_WARNING, [sourceSysId, tableName]));
            }
        }

        const clonedSysId = clonedGr.insert();
        if (!clonedSysId) {
            gs.error(gs.getMessage(CONSTANTS.RECORD_CLONE_ERROR, [sourceSysId, tableName]));
            return null;
        }
        return clonedSysId;
    },

    /**
     * Determines whether a field should be excluded from cloning based on a pre-defined list and checking for system fields (sys_)
     * @param {string} fieldName - Name of the field to check
     * @returns {boolean} - If the field should be excluded 
     **/
    _isExcludedField: function(fieldName) {
        const excludedFields = CONSTANTS.RECORD_CLONE_EXCLUDED_FIELDS;
        return excludedFields.includes(fieldName) || fieldName.startsWith('sys_');
    },

    /**
     * Determins if a value is an object
     * @param {string} value - Value to check
     * @returns {boolean} - Result of check
     **/
    _isObject: function(value) {
        return typeof value === 'object' && value !== null && !Array.isArray(value);
    },

    type: 'RecordCloner'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 17:05:22</sys_created_on>
        <sys_id>dd23f2b9537e5210829a70c0a0490e77</sys_id>
        <sys_mod_count>27</sys_mod_count>
        <sys_name>RecordCloner</sys_name>
        <sys_package display_value="CodeVault" source="x_648117_codevault">f41ce2a553b21210829a70c0a0490efc</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="CodeVault">f41ce2a553b21210829a70c0a0490efc</sys_scope>
        <sys_update_name>sys_script_include_dd23f2b9537e5210829a70c0a0490e77</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-31 20:04:35</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>dd23f2b9537e5210829a70c0a0490e77</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-31 17:05:21</sys_created_on>
        <sys_id>ab83f6b153be5210829a70c0a0490e13</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-31 17:05:21</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
